name: Delphi Code Scan
on:
  push:
    branches: [ main ]
  workflow_dispatch:
jobs:
  code-scan:
    runs-on: [self-hosted, Windows, X64, Delphi-1]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Compile with Delphi MSBuild
        shell: powershell
        run: |
          $studioPath = "C:\Program Files (x86)\Embarcadero\Studio\22.0"
          $rsvarsPath = "$studioPath\bin\rsvars.bat"
          # Find .dproj file
          $dprojFile = Get-ChildItem -Path $env:GITHUB_WORKSPACE -Recurse -Filter *.dproj | Select-Object -First 1
          if (-not $dprojFile) {
            Write-Host "ERROR: No .dproj file found."
            exit 1
          }
          $dprojPath = $dprojFile.FullName
          Write-Host "Found .dproj: $dprojPath"
          if (-not (Test-Path $rsvarsPath)) {
            Write-Host "ERROR: rsvars.bat not found at $rsvarsPath"
            exit 1
          }
          # Proper command line for CMD: no double-double-quotes!
          $cmd = "`"$rsvarsPath`" && msbuild `"$dprojPath`" /p:Config=Release /p:Platform=Win32"
          Write-Host "Running Delphi MSBuild with rsvars.bat..."
          cmd.exe /c $cmd
          if ($LASTEXITCODE -ne 0) {
            Write-Host "ERROR: Delphi MSBuild failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          }
          Write-Host " Compilation completed successfully!"
          
      - name: Run Pascal Analyzer
        shell: powershell
        run: |
          $projectPath = "$env:GITHUB_WORKSPACE\MultiSubnetFailoverTest\Project1.dpr"
          $outputHtml = "$env:GITHUB_WORKSPACE\MultiSubnetFailoverTest\analysis-output.html"
          $outputSarif = "$env:GITHUB_WORKSPACE\MultiSubnetFailoverTest\results.sarif"
          $palcmdPath = "C:\Program Files\Peganza\Pascal Analyzer Eval 9\palcmd.exe"
      
          if (-not (Test-Path $palcmdPath)) {
            Write-Host "ERROR: palcmd.exe not found at: $palcmdPath"
            exit 1
          }
      
           & "$palcmdPath" "$projectPath" /TEXT:"$outputText"
      
          if ($LASTEXITCODE -ne 0) {
            Write-Host "ERROR: Pascal Analyzer failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          }
      
          Write-Host " Pascal Analyzer completed successfully."
          
      - name: Run Pascal Analyzer2
        shell: powershell
        run: |
          $projectPath = "$env:GITHUB_WORKSPACE\MultiSubnetFailoverTest\Project1.dpr"
          $outputText = "$env:GITHUB_WORKSPACE\MultiSubnetFailoverTest\analysis-output.txt"
          $outputHtml = "$env:GITHUB_WORKSPACE\MultiSubnetFailoverTest\analysis-output.html"
          $palcmdPath = "C:\Program Files\Peganza\Pascal Analyzer Eval 9\palcmd.exe"
      
          if (-not (Test-Path $palcmdPath)) {
            Write-Host "ERROR: palcmd.exe not found at: $palcmdPath"
            exit 1
          }
      
          # Ensure the output directory exists
          $outputDir = Split-Path $outputText -Parent
          if (-not (Test-Path $outputDir)) {
            New-Item -ItemType Directory -Force -Path $outputDir
          }
      
          # Run Pascal Analyzer with TEXT output
          Write-Host "Running Pascal Analyzer..."
          & "$palcmdPath" "$projectPath" /TEXT:"$outputText"
      
          if ($LASTEXITCODE -ne 0) {
            Write-Host "ERROR: Pascal Analyzer failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          }
      
          # Verify the output file was created
          if (-not (Test-Path $outputText)) {
            Write-Host "ERROR: Pascal Analyzer output file not created at: $outputText"
            exit 1
          }
      
          Write-Host "Pascal Analyzer completed successfully. Output saved to: $outputText"
          
      - name: Convert Pascal Analyzer output to SARIF
        shell: powershell
        run: |
          $modulePath = "C:\Program Files\WindowsPowerShell\Modules\ConvertToSARIF\1.0.0"
          $textOutputPath = "$env:GITHUB_WORKSPACE\MultiSubnetFailoverTest\analysis-output.txt"
          $sarifOutputPath = "$env:GITHUB_WORKSPACE\MultiSubnetFailoverTest\results.sarif"
      
          # Check if the text output file exists
          if (-not (Test-Path $textOutputPath)) {
            Write-Host "ERROR: Pascal Analyzer output file not found at: $textOutputPath"
            Write-Host "Available files in directory:"
            Get-ChildItem "$env:GITHUB_WORKSPACE\MultiSubnetFailoverTest\" | ForEach-Object { Write-Host "  - $($_.Name)" }
            exit 1
          }
      
          # Check if ConvertToSARIF module exists
          if (-not (Test-Path "$modulePath\ConvertToSARIF.psd1")) {
            Write-Host "WARNING: ConvertToSARIF module not found. Creating basic SARIF output..."
            
            # Create a basic SARIF structure manually
            $lines = Get-Content $textOutputPath -ErrorAction SilentlyContinue
            
            $findings = @()
            foreach ($line in $lines) {
              if ($line -match "^(.+)\((\d+)\):\s+(.+)$") {
                $findings += @{
                  ruleId = "PascalAnalyzerFinding"
                  message = @{ text = $matches[3] }
                  locations = @(@{
                    physicalLocation = @{
                      artifactLocation = @{ uri = $matches[1] }
                      region = @{ startLine = [int]$matches[2] }
                    }
                  })
                  level = "warning"
                }
              }
            }
            
            $sarif = @{
              '$schema' = "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json"
              version = "2.1.0"
              runs = @(@{
                tool = @{
                  driver = @{
                    name = "Pascal Analyzer"
                    version = "9.0"
                  }
                }
                results = $findings
              })
            }
            
            $sarif | ConvertTo-Json -Depth 10 | Out-File -FilePath $sarifOutputPath -Encoding UTF8
            Write-Host "Basic SARIF report generated at $sarifOutputPath"
            return
          }
      
          # Use the ConvertToSARIF module if available
          Import-Module "$modulePath\ConvertToSARIF.psd1" -Force
          $lines = Get-Content $textOutputPath
      
          # Transform Pascal Analyzer output to a compatible object array
          $results = foreach ($line in $lines) {
            if ($line -match "^(.+)\((\d+)\):\s+(.+)$") {
              [PSCustomObject]@{
                RuleName = "PascalAnalyzerFinding"
                Message  = $matches[3]
                Line     = [int]$matches[2]
                Path     = $matches[1]
                Severity = "Warning"
              }
            }
          }
      
          # Use ConvertTo-SARIF (from the module)
          $results | ConvertTo-SARIF -FilePath $sarifOutputPath
          Write-Host "SARIF report generated using ConvertToSARIF module at $sarifOutputPath"
      - name: Upload SARIF Report
        uses: actions/upload-artifact@v4
        with:
          name: pascal-analyzer-sarif
          path: MultiSubnetFailoverTest/results.sarif
