name: Delphi Code Scan

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  code-scan:
    runs-on: [self-hosted, Windows, X64, Delphi-1]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Compile with Delphi MSBuild
        shell: powershell
        run: |
          $studioPath = "C:\Program Files (x86)\Embarcadero\Studio\22.0"
          $rsvarsPath = "$studioPath\bin\rsvars.bat"

          # Find .dproj file
          $dprojFile = Get-ChildItem -Path $env:GITHUB_WORKSPACE -Recurse -Filter *.dproj | Select-Object -First 1
          if (-not $dprojFile) {
            Write-Host "ERROR: No .dproj file found."
            exit 1
          }

          $dprojPath = $dprojFile.FullName
          Write-Host "Found .dproj: $dprojPath"

          if (-not (Test-Path $rsvarsPath)) {
            Write-Host "ERROR: rsvars.bat not found at $rsvarsPath"
            exit 1
          }

          # Proper command line for CMD: no double-double-quotes!
          $cmd = "`"$rsvarsPath`" && msbuild `"$dprojPath`" /p:Config=Release /p:Platform=Win32"

          Write-Host "Running Delphi MSBuild with rsvars.bat..."
          cmd.exe /c $cmd

          if ($LASTEXITCODE -ne 0) {
            Write-Host "ERROR: Delphi MSBuild failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          }

          Write-Host " Compilation completed successfully!"

      - name: Run Pascal Analyzer
        shell: powershell
        run: |
          $projectPath = "$env:GITHUB_WORKSPACE\MultiSubnetFailoverTest\Project1.dpr"
          $outputHtml = "$env:GITHUB_WORKSPACE\MultiSubnetFailoverTest\analysis-output.html"
          $outputSarif = "$env:GITHUB_WORKSPACE\MultiSubnetFailoverTest\results.sarif"
          $palcmdPath = "C:\Program Files\Peganza\Pascal Analyzer Eval 9\palcmd.exe"
      
          if (-not (Test-Path $palcmdPath)) {
            Write-Host "ERROR: palcmd.exe not found at: $palcmdPath"
            exit 1
          }
      
           & "$palcmdPath" "$projectPath" /TEXT:"$outputText"
      
          if ($LASTEXITCODE -ne 0) {
            Write-Host "ERROR: Pascal Analyzer failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          }
      
          Write-Host " Pascal Analyzer completed successfully."


      - name: Convert Pascal Analyzer output to SARIF
        shell: powershell
        run: |
          $modulePath = "C:\Program Files\WindowsPowerShell\Modules\ConvertToSARIF\1.0.0"
      
          if (-not (Test-Path "$modulePath\ConvertToSARIF.psd1")) {
            Write-Host "ERROR: ConvertToSARIF.psd1 not found"
            exit 1
          }
      
          # Import using the manifest (.psd1)
          Import-Module "$modulePath\ConvertToSARIF.psd1" -Force
      
          $textOutputPath = "$env:GITHUB_WORKSPACE\MultiSubnetFailoverTest\analysis-output.txt"
          $sarifOutputPath = "$env:GITHUB_WORKSPACE\MultiSubnetFailoverTest\results.sarif"
      
          $lines = Get-Content $textOutputPath
      
          # Transform Pascal Analyzer output to a compatible object array (mock example)
          $results = foreach ($line in $lines) {
            if ($line -match "^(.+)\((\d+)\):\s+(.+)$") {
              [PSCustomObject]@{
                RuleName = "PascalAnalyzerFinding"
                Message  = $matches[3]
                Line     = [int]$matches[2]
                Path     = $matches[1]
                Severity = "Warning"
              }
            }
          }
      
          # Use ConvertTo-SARIF (from the module)
          $results | ConvertTo-SARIF -FilePath $sarifOutputPath
      
          Write-Host "SARIF report generated at $sarifOutputPath"


      - name: Upload SARIF Report
        uses: actions/upload-artifact@v3
        with:
          name: pascal-analyzer-sarif
          path: MultiSubnetFailoverTest/results.sarif

      - name: Upload HTML Report
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path "$env:GITHUB_WORKSPACE\artifacts"
          if (Test-Path "$env:GITHUB_WORKSPACE\MultiSubnetFailoverTest\analysis-output.html") {
            Copy-Item "$env:GITHUB_WORKSPACE\MultiSubnetFailoverTest\analysis-output.html" "$env:GITHUB_WORKSPACE\artifacts\"
            Write-Host "HTML report saved to artifacts directory"
          } else {
            Write-Host "HTML report not found"
          }

      - name: Save SARIF Report
        shell: powershell
        run: |
          if (Test-Path "$env:GITHUB_WORKSPACE\MultiSubnetFailoverTest\results.sarif") {
            Copy-Item "$env:GITHUB_WORKSPACE\MultiSubnetFailoverTest\results.sarif" "$env:GITHUB_WORKSPACE\artifacts\"
            Write-Host "SARIF report saved to artifacts directory"
            Get-Content "$env:GITHUB_WORKSPACE\MultiSubnetFailoverTest\results.sarif" | Write-Host
          } else {
            Write-Host "SARIF report not found"
          }
